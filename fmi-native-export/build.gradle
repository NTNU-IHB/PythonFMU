import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp-library"
}

def python = OperatingSystem.current().isLinux() ? "python3" : "python"

ext.getPythonIncludeDir = {

    ProcessBuilder builder = new ProcessBuilder(python, "-c", "from sysconfig import get_paths as gp; print(gp()['include'])")
    builder.redirectErrorStream(true)
    Process process = builder.start()
    InputStream is = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(is))

    return reader.readLine()

}

ext.getPythonLibDir = {

    ProcessBuilder builder = new ProcessBuilder(python, "-c", "from sysconfig import get_paths as gp; print(gp()['stdlib'])")
    builder.redirectErrorStream(true)
    Process process = builder.start()
    InputStream is = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(is))

    return reader.readLine()

}

ext.getPythonDir = {

    ProcessBuilder builder = new ProcessBuilder(python, "-c", "from sysconfig import get_paths as gp; print(gp()['data'])")
    builder.redirectErrorStream(true)
    Process process = builder.start()
    InputStream is = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(is))

    return reader.readLine()

}

def pythonIncludeDir = getPythonIncludeDir()
def pythonLibDir = getPythonLibDir()
def pythonDir = getPythonDir()

def javaHome = Jvm.current().javaHome

library { CppLibrary lib ->

    baseName.set("pythonfmu-export")

    targetMachines.set([
            machines.windows.x86_64,
            machines.linux.x86_64,
    ])

    lib.binaries.whenElementFinalized { CppBinary binary ->
        project.dependencies {

            //python
            add(binary.runtimeLibraries.name, files("$pythonDir"))
            add(binary.includePathConfiguration.name, files("$pythonIncludeDir"))
            add(binary.linkLibraries.name, files(OperatingSystem.current().getLinkLibraryName("$pythonLibDir")))

            //jni
            add(binary.runtimeLibraries.name, files("$javaHome/jre/bin/server"))
            add(binary.includePathConfiguration.name, files("$javaHome/include"))

            if (OperatingSystem.current().isLinux()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/linux"))
            } else if (OperatingSystem.current().isWindows()) {
                add(binary.includePathConfiguration.name, files("$javaHome/include/win32"))
            } else {
                throw new IllegalStateException("Unsupported OS: " + OperatingSystem.current().name)
            }

        }

    }

}

def assembleAllRelease = []

tasks.all {
    if (it.name.contains("assembleRelease")) {
        assembleAllRelease.add(it)
    }
}

tasks.register("assembleAllRelease")

tasks.register("copyNativeLibs") {

    doLast {
        copy {

            into "$rootDir/fmu-builder/src/main/resources/binaries/"

            if (OperatingSystem.current().isLinux()) {
                into("linux64") {
                    from "$buildDir/lib/main/release/linux"
                    include "*.so"
                }
            } else if (OperatingSystem.current().isWindows()) {
                into("win64") {
                    from "$buildDir/lib/main/release/windows/"
                    include "*.dll"
                }
            } else {
                throw new Exception("Unsupported OS: " + OperatingSystem.current().name)
            }

        }
    }

    dependsOn assembleAllRelease

}
